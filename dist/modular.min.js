/** @license Modular-UI
* Copyright (c) 2018 Jonas Karg
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*/ /** @license Modular-UI
* Copyright (c) 2018 Jonas Karg
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*/var Modular=function(){"use strict";// Creates an error-string with modular-format
function a(a){if(!n.errors)return"\uD83D\uDEA8 (Modular): ";let b,c,d=n.errors[a],e=`[${d[0]}]`,f="";// Removing error type
return d.shift(),1<d.length&&(f=`\n@ ${d.pop()}()\n`),b=d.map(a=>`\n--> ${a}`).join("\n"),c=`ðŸš¨ (Modular): ${[e,b,f].join("\n")}`,c}// Transforms "impure" objects into something modular can work with
function b(a){const b={};return Array.from(a).map(a=>{b[a.name]=a.value}),b}// Transforming given values into DOM-elements
function c(b){// No action required if the value is an element
if(b=b||"",b instanceof Element)return b;if(b instanceof Function)return c(b());if(b instanceof Array){// Return empty element if array is empty
if(!b.length)return c();// Appending each element to wrapper
const a=document.createElement("div");return b.map(b=>a.appendChild(c(b))),a}// Create a text-node if content is string
if(b.constructor===String||b.constructor===Number)return document.createTextNode(b);// Render modular elements
if(b instanceof Object){if(b.__config__&&"modular-element"!==b.__config__.type)throw a(2);return b.__config__.render()}throw a(3)}function d(a){let b="";for(let c=0;c<a.length;c++)1<c&&e(a[c])&&/[a-zA-Z]/.test(a[c])?(b+="-",b+=a[c].toLowerCase()):b+=a[c];return b}function e(a){return a==a.toUpperCase()}// Transforms a style object into style that only applies to a single element
function f(a,b){let c="";const e=Object.entries(a),g=[];return e.map(a=>{const e=a[0],h=a[1];// If a css-declaration starts with a colon, create a pseudo class
if(":"===e[0]&&void 0!==b){let a;a=h.constructor===String?h:f(h),g.push(`[data-modular-id="${b}"]${e}{${a} }`)}else c+=`${d(a[0])}:${h};`}),b&&(c=`[data-modular-id="${b}"]{${c}}${g.join("")}`),c}// Transforms different types of style into global style
function g(b,c){let d=b;// Strings
if(d.constructor===String)return`[data-modular-id="${c}"]{${d}}`;// Functions
// Style-objects
if(d instanceof Function&&(d=d()),d instanceof Object){const b=Object.entries(d);if(!b.length)return console.warn(a(6)),"";// If style-object contains css rules:
b[0][1]instanceof Object?(d="",b.map(a=>{d+=`[data-modular-id="${c}"] ${a[0]}{${f(a[1])}}`})):d=f(d,c)}// Return if style is valid
return d.constructor===String?d:void console.warn(a(6));// Warn about invalid style
}// Creates DOM-elements
function h(a,b,c){const d=document.createElement(a);// Generate global style if style found
return b&&b.style&&(n.tempElCount[n.tempElCount.length-1]++,n.tempStyle[n.tempStyle.length-1]+=g(b.style,n.tempElCount[n.tempElCount.length-1]),b["data-modular-id"]=n.tempElCount[n.tempElCount.length-1],delete b.style),Object.entries(b).map(a=>{d.setAttribute(a[0],a[1])}),Object.assign(d,b),c&&d.appendChild(c),d}// Creates a modular-element
function i(){// Extracting tag and attributes from the arguments
let b=Array.from(arguments),d=b[0].toLowerCase(),f=b[1]||{};// Remove everything unnecessary from the arguments array
// Checking if all mandatory tags are available
if(b.splice(0,2),1===b.length&&(b=b[0]),"string"!=typeof d)throw new Error(a(5));if(void 0!==f.__config__)throw Error(a(1));// Setting up the configuration
// Returning the modular element
return f.__config__={type:"modular-element",tag:d,content:b,bindings:f.$bind,element:null},f.__config__.render=()=>{const a={};// "Cleaning" the attributes of configuration-properties
// Returning the rendered element
return Object.assign(a,f||{}),delete a.__config__,delete a.$bind,f.__config__.element=h(f.__config__.tag,a,c(f.__config__.content)),f.__config__.bindings instanceof Object&&(f.__config__.change=()=>{Object.entries(f.__config__.bindings).map(a=>{let b=f.__config__.element[a[0]];"true"==b?b=!0:"false"==b&&(b=!1),j(a[1],b),(n.bindings[a[1]].value!==n.bindings[a[1]].lastValue||n.bindings[a[1]].value instanceof Object||n.bindings[a[1]].value instanceof Array)&&n.bindings[a[1]].listeners.map(b=>{b(k(a[1]))})})},Object.entries(f.__config__.bindings).map(a=>{n.bindings[a[1]]||(n.bindings[a[1]]={// The elements bound to the binding
elements:[],lastValue:void 0,// The value of the binding
value:void 0,// The functions that will run be run when the binding changes
listeners:[]}),n.bindings[a[1]].elements.push({// The element
element:f.__config__.element,// The attribute that has to change
value:a[0]})}),f.__config__.element.addEventListener("mouseover",a=>f.__config__.change(a)),f.__config__.element.addEventListener("mouseout",a=>f.__config__.change(a)),f.__config__.element.addEventListener("click",a=>f.__config__.change(a)),f.__config__.element.addEventListener("change",a=>f.__config__.change(a)),f.__config__.element.addEventListener("keyup",a=>f.__config__.change(a)),f.__config__.element.addEventListener("keydown",a=>f.__config__.change(a)),f.__config__.element.addEventListener("contextmenu",a=>f.__config__.change(a)),f.__config__.change()),f.__config__.element},f}// Set the value of a binding
function j(a,b){n.bindings[a]||(n.bindings[a]={elements:[],lastValue:void 0,value:void 0,listeners:[]}),n.bindings[a].lastValue=n.bindings[a].value,n.bindings[a].value=b,n.bindings[a].elements.map(b=>{b.element[b.value]=n.bindings[a].value})}// Get the value of a binding
function k(a){return n.bindings[a]?n.bindings[a].value:void 0}// Add a listener to a binding
// Converts a (html) string into a Modular-element
function l(c){// Validating input
if(c.constructor!==String)throw new Error(a(4));// Creating a wrapper
let d=document.createElement("div");d.innerHTML=c.trim();// Mapping all nodes in the wrapper
const e=Array.from(d.childNodes).map(a=>a instanceof Element?i(a.tagName,b(a.attributes),l(a.innerHTML)):a.textContent);return e}// The method for rendering stuff
const m=document.createElement("style");// document.head.appendChild(Modular.data.styleElement);
m.setAttribute("modular-style","");const n={// All bindings (their names) and the associated elements
bindings:{},// The render events
preRender:new Event("prerender"),postRender:new Event("postrender"),// The error object containing all errors
errors:{0:["Info","You are using the development build of Modular. Make sure to use the production build when deploying this app."],1:["Invalid Attribute","Unable to create Modular element.","Invalid attribute.",`The attribute "__config__" is reserved for Modular.`,"el"],2:["Invalid Input","An object, which is not a Modular-element, was passed into Modular.core.getHtml().","( Modular.core.getHtml() was called by Modular.render() )","Modular does not know how how to handle this.","core.getHtml"],3:["Invalid Input","A value, which is not a [String], [Number], [Element] (html), [Function], [Object] or [Array], was passed into Modular.core.getHtml().","( Modular.core.getHtml() was called by Modular.render() )","This error might be caused by a invalid child-element in Modular.render() or Modular.el().","Modular does not know how how to handle this.","core.getHtml"],4:["Invalid or Missing Input","Unable to scan.","A invalid value was passed into Modular.scan().","Modular.scan() expects a [String].","scan"],5:["Missing TagName","Unable to create Modular element.","Missing tag.","( The tag of a Modular-element is the first attribute of Modular.el() )","el"],6:["Invalid Style","Unable to convert given value to CSS.","An invalid value passed into Modular.core.getStyle().","Modular.core.getStyle() expects a [String] (already containing inline style), an [Object] (containing valid style) or a [Function] (returning an object that contains valid style)","Empty or invalid styles should be avoided.","core.getStyle"],7:["Invalid Input","Unable to render.","Modular.render() is missing a root-element or a container-element","( A root-element can be: a [Modular-element], [String], [Number], [Element] (html), [Array] (which contains any of the mentioned) or [Function] (which returns any of the mentioned) )","A container-element has to be an html-element or a valid CSS-selector ( [String] ).","Keep in mind - if the container-element is not a child of the page, you probably won't be able to see much.","render"],8:["Invalid Render-Container","Unable to render","Modular.render() received an invalid container-element.","A container-element has to be an html-element or a valid CSS-selector ( [String] ).","Keep in mind - if the container-element is not a child of the page, you probably won't be able to see much.","render"],9:["Invalid configuration","Could not get route.","Modular.router.routes must be an object or null.",`The routes-object should be structured like this this:\nModular.router.routes = {\n  "path/of/the/page": MyElement,\n  "path/of/the/other/page": MyOtherElement\n}`,"router.routeChange"]},// A variable to temporarily store style
// so multiple functions can access it
tempStyle:[],// An element that is used to add the style
styleElement:m,// A counter used to generate element-IDs
tempElCount:[]};var o=/*#__PURE__*/Object.freeze({data:n}),p=/*#__PURE__*/Object.freeze({err:a,getAttr:b,getHtml:c,getStyle:g,makeEl:h}),q=/*#__PURE__*/Object.freeze({el:i}),r=/*#__PURE__*/Object.freeze({getBinding:k,setBinding:j,listenBinding:function(a,b){n.bindings[a]||j(a,void 0),n.bindings[a].listeners.push(b)},scan:l,render:function(b,d){if(n.tempStyle.push(""),n.tempElCount.push(0),window.dispatchEvent(n.preRender),!b||!d)throw new Error(a(7));let e;// Handling container selector-string
// Validating container
if(e=d.constructor===String?document.querySelector(d):d,!(e instanceof Element))throw a(8);// Adding the rendered content
e.innerHTML="",e.appendChild(c(b)),document.querySelector("style[modular-style]")||document.head.appendChild(n.styleElement),n.styleElement.innerHTML=n.tempStyle[n.tempStyle.length-1],n.tempStyle.pop(),n.tempElCount.pop(),window.dispatchEvent(n.postRender)}});const s={// Event for route changes
newRouteEvent:new Event("newroute"),// Configuration
routes:void 0,// The rendered page
page:void 0,// Transforming a path-string into an array
getRoute(a){let b=a;return b=b.replace(/(^\/+|\/+$)/g,""),b=b.split("/"),b},// Updating content according to the routes-object
routeChange(){// Validating the routes object
if(!s.routes)return;if(s.routes.constructor!==Object)throw a(9);const b=s.getRoute(window.location.pathname),c=Object.entries(s.routes);// Looping through all routes in the routes-object
for(let d=0;d<c.length;d++){const e=s.getRoute(c[d][0]);let f=!0;// Checking if the current URL matches the route
for(let c=0;c<e.length;c++)if(b[c]===void 0||"**"!==e[c]&&e[d]!==b[d]){f=!1;break}// Change content if match was found
if(f)return s.page=c[d][1],void window.dispatchEvent(s.newRouteEvent)}},// Initializing the router
init(){window.addEventListener("popstate",s.routeChange),s.routeChange()},// Navigate to a route
navigate(a){window.history.pushState(null,a,a),s.routeChange()}};var t=/*#__PURE__*/Object.freeze({router:s});const u={// Events, bindings and error-messages
data:o,// The core
core:p,// Methods
getBinding:r.getBinding,setBinding:r.setBinding,listenBinding:r.listenBinding,scan:r.scan,render:r.render,el:q.el,router:t};return u}();
